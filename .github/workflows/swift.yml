name: build_test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_test:
    timeout-minutes: 30
    strategy:
      # If macos-latest fails, we still don't want to cancel ubuntu-latest or the other way around.
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
        kind: [debug]
        include:
          # On linux also build and test release.
          - os: ubuntu-latest
            kind: release

    runs-on: ${{ matrix.os }}

    env:
      SWIFT_VERSION: 6.1

    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 25-nightly

      # Is it failing to run tests b/c we're overriding
      # what swift binary to use?
      - name: Setup Swift for Ubuntu
        if: runner.os == 'Linux'
        run: |
          wget -q https://download.swift.org/swift-${SWIFT_VERSION}-release/ubuntu2204/swift-${SWIFT_VERSION}-RELEASE/swift-${SWIFT_VERSION}-RELEASE-ubuntu22.04.tar.gz
          tar xzf swift-${SWIFT_VERSION}-RELEASE-ubuntu22.04.tar.gz
          mv swift-${SWIFT_VERSION}-RELEASE-ubuntu22.04 /opt/swift
          rm swift-${SWIFT_VERSION}-RELEASE-ubuntu22.04.tar.gz
          export PATH="/opt/swift/usr/bin:${PATH}"

      - name: Start PostgreSQL and create database (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo systemctl start postgresql
          # Find the active pg_hba.conf file
          HBA_CONF=$(sudo -u postgres psql -t -P format=unaligned -c 'SHOW hba_file;')
          # Add a line to allow all local users to connect without a password (trust auth)
          # This is safe in a CI environment
          echo "local   all             all                                     trust" | sudo tee -a $HBA_CONF
          # Restart postgres to apply the new auth setting
          sudo systemctl restart postgresql
          # Wait for restart
          sleep 2
          # Create the 'fuzzilli' database. The 'runner' user can now connect.
          createdb fuzzilli

      - name: Start PostgreSQL and create database (macOS)
        if: runner.os == 'macOS'
        run: |
          # Start the pre-installed postgresql service
          brew services start postgresql
          # Wait for it to be ready
          sleep 5 
          # Create the 'fuzzilli' database.
          # On macOS/brew, this usually works without password auth by default for the current user.
          createdb fuzzilli
      
      - uses: actions/checkout@v2
      - name: Build
        run: swift build -c ${{ matrix.kind }} -v
      - name: Run tests with Node.js
        run: swift test -c ${{ matrix.kind }} -v
      - name: Install jsvu
        run: npm install jsvu -g
      - name: Install d8
        run: jsvu --os=default --engines=v8
      - name: Run tests with d8
        run: FUZZILLI_TEST_SHELL=~/.jsvu/engines/v8/v8 swift test -c ${{ matrix.kind }} -v
